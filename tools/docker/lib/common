#!/bin/bash
set -ex

# Current supported architectures
export ALL_TARGET_ARCH=(amd64 arm32v6 arm64v8)

# Name of the Certbot Docker organizaation on GitHub. After creating
# repositories with the same names (e.g. "certbot", "dns-dnsmadeeasy", etc.)
# using a different account on Docker Hub, you can change this value to have
# the scripts modify those Docker repositories rather than the repositories for
# the official Certbot Docker images.
export DOCKER_HUB_ORG="certbot"

# List of Certbot plugins
export CERTBOT_PLUGINS=(
    "dns-dnsmadeeasy"
    "dns-dnsimple"
    "dns-ovh"
    "dns-cloudflare"
    "dns-digitalocean"
    "dns-google"
    "dns-luadns"
    "dns-nsone"
    "dns-rfc2136"
    "dns-route53"
    "dns-gehirn"
    "dns-linode"
    "dns-sakuracloud"
)

# Converts input architecture identifier to the platform specification
# understood by `docker build buildx --platform <specification>`.
# Usage: arch2platform [arm64|arm32v6|arm64v8]
# If the input is not recognized, an error is returned
arch2platform() {
    REQUESTED_ARCH="${1}"
    case $REQUESTED_ARCH in
        amd64)
            echo "linux/amd64"
            ;;
        arm32v6)
            echo "linux/arm/v6"
            ;;
        arm64v8)
            echo "linux/arm64"
            ;;
        *)
            return 1
            ;;
    esac
}

# Parses the requested architecture string and sets ALL_REQUESTED_ARCH to
# result.
# Usage: archList2platformList all
#        archList2platformList [arch-list]
#             where [arch-list] is a comma separated list of architectures
#             as interpreted by the arch2platform function 
archList2platformList() {
    local IFS=","
    REQUESTED_ARCH="${1}"
    # Handle the special value "all"
    if [[ "${REQUESTED_ARCH}" == "all" ]]; then
        # Recursive call using the list of all known architectures cast to
        # comma separated list
        archList2platformList "${ALL_TARGET_ARCH[*]}"
        return 0
    fi
    # Convert comma separated list to array of strings
    read -ra REQUESTED_ARCH_LIST <<< "$REQUESTED_ARCH"
    # Convert each string to the corresponding docker platform specification.
    # The internal call to arch2platform might return an error if the arch is
    # not recognized, crashing the process (`set -ex` called at beginning of 
    # script)
    PLATFORM_LIST=()
    for TARGET_ARCH in "${REQUESTED_ARCH_LIST[@]}"; do
        PLATFORM_LIST+=($(arch2platform "$TARGET_ARCH"))
    done

    # Return a string made from the array of docker platform spedifications
    echo "${PLATFORM_LIST[*]}"
}
